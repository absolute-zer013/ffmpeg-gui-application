name: CI/CD Pipeline

on:
  push:
    tags:
      - 'vt*'   # Only run on version tags to build and release artifacts

jobs:
  analyze:
    name: Analyze & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
      
      - name: Get dependencies
        run: flutter pub get
      
      - name: Format check
        run: dart format --set-exit-if-changed .
      
      - name: Analyze
        run: flutter analyze
      
      - name: Lint
        run: dart analyze --fatal-infos

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
      
      - name: Get dependencies
        run: flutter pub get
      
      - name: Run unit tests
        run: flutter test --coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build_windows:
    name: Build Windows
    runs-on: windows-latest
    needs: [analyze, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
      
      - name: Get dependencies
        run: flutter pub get
      
      - name: Build Windows release
        run: flutter build windows --release
      
      - name: Zip Windows portable
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          $zipPath = "dist/windows-portable.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path "build/windows/x64/runner/Release/*" -DestinationPath $zipPath

      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: build/windows/x64/runner/Release/
          retention-days: 7

      - name: Upload Windows portable zip
        uses: actions/upload-artifact@v4
        with:
          name: windows-portable-zip
          path: dist/windows-portable.zip
          retention-days: 7
      
      - name: Install Inno Setup (tagged builds)
        if: startsWith(github.ref, 'refs/tags/v')
        shell: pwsh
        run: |
          # Try Chocolatey first (quiet, no progress)
          $installed = $false
          try {
            choco install innosetup -y --no-progress
            $installed = $true
          } catch {
            Write-Host "Chocolatey install failed or not available. Falling back to direct download." -ForegroundColor Yellow
          }

          # Check typical install locations
          $candidatePaths = @(
            "$env:ProgramFiles(x86)\Inno Setup 6\ISCC.exe",
            "$env:ProgramFiles\Inno Setup 6\ISCC.exe"
          )
          $found = $candidatePaths | Where-Object { Test-Path $_ } | Select-Object -First 1

          if (-not $found) {
            $url = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
            $installer = Join-Path $env:TEMP "innosetup.exe"
            Write-Host "Downloading Inno Setup from $url" -ForegroundColor Cyan
            Invoke-WebRequest -Uri $url -OutFile $installer
            Write-Host "Running silent installer..." -ForegroundColor Cyan
            Start-Process $installer -ArgumentList "/VERYSILENT" -Wait
          }

          # Ensure ISCC is on PATH for this session
          $env:Path += ";$env:ProgramFiles(x86)\Inno Setup 6;$env:ProgramFiles\Inno Setup 6"

      - name: Build Windows installer (tagged builds)
        if: startsWith(github.ref, 'refs/tags/v')
        shell: pwsh
        run: |
          # Parse version from pubspec.yaml (fallback to 1.0.0)
          $pub = Get-Content -Raw pubspec.yaml
          $m = [regex]::Match($pub, 'version:\s*([0-9]+\.[0-9]+\.[0-9]+)')
          $env:APP_VERSION = if ($m.Success) { $m.Groups[1].Value } else { '1.0.0' }
          Write-Host "Using version $env:APP_VERSION"

          # Ensure dist exists
          if (-not (Test-Path 'dist')) { New-Item -ItemType Directory -Path dist | Out-Null }

          # Build installer via ISCC (robust resolution)
          $isccCmd = (Get-Command ISCC -ErrorAction SilentlyContinue)
          if ($isccCmd) {
            $isccPath = $isccCmd.Path
          } else {
            $pathsToCheck = @(
              "$env:ProgramFiles(x86)\Inno Setup 6\ISCC.exe",
              "$env:ProgramFiles\Inno Setup 6\ISCC.exe"
            )
            $isccPath = $pathsToCheck | Where-Object { Test-Path $_ } | Select-Object -First 1
          }
          if (-not $isccPath) { throw 'ISCC.exe not found after installation.' }

          & "$isccPath" "/DMyAppVersion=$env:APP_VERSION" "installer\\installer.iss"
          if ($LASTEXITCODE -ne 0) { throw 'Inno Setup compilation failed.' }

      - name: Upload Windows installer artifact (tagged builds)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: dist/*.exe
          retention-days: 14

      - name: Create release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
